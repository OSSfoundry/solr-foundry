/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'

description = 'Solr Benchmark Framework'

compileJava {
  doFirst {
    options.compilerArgs.remove("-Werror")
    options.compilerArgs.remove("-proc:none")
  }
}

forbiddenApis {
  bundledSignatures += [
      'jdk-unsafe',
      'jdk-deprecated',
      'jdk-non-portable',
  ]

  suppressAnnotations += [
      "**.SuppressForbidden"
  ]
}


task jmh(type: JavaExec) {
  dependsOn("classes")
  group = "benchmark"
  main = "org.openjdk.jmh.Main"
  classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath

  standardOutput(System.out)
  errorOutput(System.err)

  def include = project.properties.get('include');
  def exclude = project.properties.get('exclude');
  def format = project.properties.get('format', 'json');
  def profilers = project.properties.get('profilers');
  def jvmArgs = project.properties.get('jvmArgs')
  def verify = project.properties.get('verify');

  def resultFile = file("build/reports/jmh/result.${format}")

  if (include) {
    args include
  }
  if (exclude) {
    args '-e', exclude
  }
  if (verify != null) {
    // execute benchmarks with the minimum amount of execution (only to check if they are working)
    println "≥≥ Running in verify mode"
    args '-f', 1
    args '-wi', 1
    args '-i', 1
  }
  args '-foe', 'true'   //fail-on-error
  args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
  if (profilers) {
    profilers.split(',').each {
      args '-prof', it
    }
  }

  args '-jvmArgsPrepend', '-Xms8g' // make param-able
  args '-jvmArgsPrepend', '-Djmh.separateClassLoader=true'
  args '-jvmArgsPrepend', '-Dlog4j2.is.webapp=false'
  args '-jvmArgsPrepend', '-Dlog4j2.garbagefreeThreadContextMap=true'
  args '-jvmArgsPrepend', '-Dlog4j2.enableDirectEncoders=true'
  args '-jvmArgsPrepend', '-Dlog4j2.enable.threadlocals=true'
  args '-jvmArgsPrepend', '-XX:ConcGCThreads=3'
  args '-jvmArgsPrepend', '-XX:ParallelGCThreads=6'
  args '-jvmArgsPrepend', '-XX:+UseG1GC'
  args '-jvmArgsPrepend', '-Djetty.insecurerandom=1'
  args '-jvmArgsPrepend', '-Djava.security.egd=file:/dev/./urandom'
  args '-jvmArgsPrepend', '-XX:-UseBiasedLocking'
  args '-jvmArgsPrepend', '-XX:+PerfDisableSharedMem'
  args '-jvmArgsPrepend', '-XX:+ParallelRefProcEnabled'
//  args '-jvmArgsPrepend', '-XX:MaxGCPauseMillis=250'
//  args '-jvmArgsPrepend', '-XX:+FlightRecorder'
//  args '-jvmArgsPrepend', '-XX:StartFlightRecording=filename=jfr_results/,dumponexit=true,settings=profile,path-to-gc-roots=true'

  args '-jvmArgsPrepend', '-Dsolr.log.dir='

  if (jvmArgs) {
    for (jvmArg in jvmArgs.split(' ')) {
      args '-jvmArgsPrepend', jvmArg
    }
  }

  args '-rf', format
  args '-rff', resultFile

  doFirst {
    // println "\nClasspath:" + jmh.classpath.toList()
    println "\nExecuting JMH with: $args \n"

    getJvmArgs().remove("-XX:TieredStopAtLevel=1")

    args '-jvmArgsPrepend', '-Djava.class.path='+ toPath(getClasspath().files)
    resultFile.parentFile.mkdirs()
  }

  doLast {
    // jvmArgs "java.class.path", toPath(jmh.classpath)
  }

}


private static String toPath(Set<File> classpathUnderTest) {
  StringBuilder sb = new StringBuilder();
  for (File entry : classpathUnderTest) {
    sb.append(entry.getAbsolutePath());
    sb.append(File.pathSeparatorChar);
  }
  return sb.toString();
}

dependencies {
  implementation project(':solr:test-framework')
  implementation 'org.openjdk.jmh:jmh-core'
  annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess'
}

