/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'

description = 'Solr Test Framework'

sourceSets {
  // Note that just declaring this sourceset creates two configurations.
  jmh {
    java.srcDirs = ['src/jmh/java']
  }
}

//forbiddenApisJmh {
//  bundledSignatures += [
//          'jdk-unsafe',
//          'jdk-deprecated',
//          'jdk-non-portable',
//  ]
//
//  suppressAnnotations += [
//          "**.SuppressForbidden"
//  ]
//}

task jmh(type: JavaExec) {
  dependsOn("jmhClasses")
  group = "benchmark"
  main = "org.openjdk.jmh.Main"
  classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
  //args "-Dfile.encoding=UTF-8", "-Dlog4j.configurationFile=src/resources/logconf/log4j2-startup-debug.xml"
  standardOutput(System.out)
  errorOutput(System.err)

  def include = project.properties.get('include', "org.apache.solr.bench.index.CloudIndexing");
 // def exclude = project.properties.get('exclude');
  def format = project.properties.get('format', 'json');
  def profilers = project.properties.get('profilers');
  def jvmArgs = project.properties.get('jvmArgs')
  def verify = project.properties.get('verify');

  def resultFile = file("build/reports/jmh/result.${format}")

  args include
//  if (exclude) {
//    args '-e', exclude
//  }
  if (verify != null) {
    // execute benchmarks with the minimum amount of execution (only to check if they are working)
    println "≥≥ Running in verify mode"
    args '-f', 1
    args '-wi', 1
    args '-i', 1
  }
  args '-foe', 'true'   //fail-on-error
  args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
  if (profilers) {
    profilers.split(',').each {
      args '-prof', it
    }
  }
 // args '-jvmArgsPrepend', '-Xmx4g'
  args '-jvmArgsPrepend', '-Xms4g'
  if (jvmArgs) {
    for (jvmArg in jvmArgs.split(' ')) {
      args '-jvmArgsPrepend', jvmArg
    }
  }
  args '-rf', format
  args '-rff', resultFile

  doFirst {
    println "\nClasspath:" + jmh.classpath.toList()
    println "\nExecuting JMH with: $args \n"
    resultFile.parentFile.mkdirs()
  }
}

classes.finalizedBy(jmhClasses)

dependencies {
  api project(':solr:core')
  api project(':solr:solrj')
  api "org.apache.lucene:lucene-test-framework"
  api "org.apache.lucene:lucene-analysis-common"

  jmhImplementation project(':solr:test-framework')
  jmhImplementation 'org.openjdk.jmh:jmh-core'
  jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess'

  api ('com.google.guava:guava', {
    exclude group: "org.codehaus.mojo", module: "animal-sniffer-annotations"
    exclude group: "com.google.j2objc", module: "j2objc-annotations"
    exclude group: "com.google.errorprone", module: "error_prone_annotations"
    exclude group: "org.checkerframework", module: "checker-qual"
    exclude group: "com.google.code.findbugs", module: "jsr305"
  })

  api 'org.apache.logging.log4j:log4j-core'
  api 'io.opentracing:opentracing-mock'

  implementation 'io.dropwizard.metrics:metrics-jetty9'
  implementation 'com.lmax:disruptor'
  //api 'org.awaitility:awaitility'
}

